// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumType.vsl in andromda-hibernate-cartridge.
//
package org.andromda.persistence.hibernate.usertypes;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Properties;

import org.hibernate.HibernateException;
import org.hibernate.usertype.EnhancedUserType;
import org.hibernate.usertype.ParameterizedType;

/**
 * A Hibernate UserType for Java5 enumerations. Taken from
 * <a href="http://www.hibernate.org/272.html">Java 5 EnumUserType</a>.
 */
public class HibernateEnumType implements EnhancedUserType, ParameterizedType {
	private Class<Enum>	enumClass;
	
	@Override
	public void setParameterValues(final Properties parameters) {
		final String enumClassName = parameters.getProperty("enumClassName");
		try {
			// noinspection unchecked
			enumClass = (Class<Enum>) Class.forName(enumClassName);
		} catch (final ClassNotFoundException cnfe) {
			throw new HibernateException("Enum class not found", cnfe);
		}
	}
	
	@Override
	public Object assemble(final Serializable cached, final Object owner)
	        throws HibernateException {
		return cached;
	}
	
	@Override
	public Object deepCopy(final Object value) throws HibernateException {
		return value;
	}
	
	@Override
	public Serializable disassemble(final Object value)
	        throws HibernateException {
		return (Enum) value;
	}
	
	@Override
	public boolean equals(final Object x, final Object y)
	        throws HibernateException {
		return x == y;
	}
	
	@Override
	public int hashCode(final Object x) throws HibernateException {
		return x.hashCode();
	}
	
	@Override
	public boolean isMutable() {
		return false;
	}
	
	@Override
	public Object nullSafeGet(final ResultSet resultSet, final String[] names,
	        final Object owner) throws HibernateException, SQLException {
		final String name = resultSet.getString(names[0]);
		return resultSet.wasNull() ? null : Enum.valueOf(enumClass, name);
	}
	
	@Override
	public void nullSafeSet(final PreparedStatement statement,
	        final Object value, final int index) throws HibernateException,
	        SQLException {
		if (value == null) {
			statement.setNull(index, Types.VARCHAR);
		} else {
			if (value instanceof Enum) {
				statement.setString(index, ((Enum) value).name());
			} else {
				statement.setString(index, (String) value);
			}
		}
	}
	
	@Override
	public Object replace(final Object original, final Object target,
	        final Object owner) throws HibernateException {
		return original;
	}
	
	@Override
	public Class returnedClass() {
		return enumClass;
	}
	
	@Override
	public int[] sqlTypes() {
		return new int[] {
			Types.VARCHAR
		};
	}
	
	@Override
	public Object fromXMLString(final String xmlValue) {
		return Enum.valueOf(enumClass, xmlValue);
	}
	
	@Override
	public String objectToSQLString(final Object value) {
		return '\'' + ((Enum) value).name() + '\'';
	}
	
	@Override
	public String toXMLString(final Object value) {
		return ((Enum) value).name();
	}
	
}
