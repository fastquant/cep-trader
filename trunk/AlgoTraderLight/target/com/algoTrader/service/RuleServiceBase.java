// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.algoTrader.service;

/**
 * <p>
 * Spring Service base class for <code>com.algoTrader.service.RuleService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.algoTrader.service.RuleService
 */
public abstract class RuleServiceBase
    implements com.algoTrader.service.RuleService
{

    private com.algoTrader.service.LookupService lookupService;

    /**
     * Sets the reference to <code>lookupService</code>.
     */
    public void setLookupService(com.algoTrader.service.LookupService lookupService)
    {
        this.lookupService = lookupService;
    }

    /**
     * Gets the reference to <code>lookupService</code>.
     */
    protected com.algoTrader.service.LookupService getLookupService()
    {
        return this.lookupService;
    }

    /**
     * @see com.algoTrader.service.RuleService#initServiceProvider(java.lang.String)
     */
    public void initServiceProvider(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.initServiceProvider(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleInitServiceProvider(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.initServiceProvider(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #initServiceProvider(java.lang.String)}
      */
    protected abstract void handleInitServiceProvider(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#isInitialized(java.lang.String)
     */
    public boolean isInitialized(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.isInitialized(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            return this.handleIsInitialized(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.isInitialized(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #isInitialized(java.lang.String)}
      */
    protected abstract boolean handleIsInitialized(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#destroyServiceProvider(java.lang.String)
     */
    public void destroyServiceProvider(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.destroyServiceProvider(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleDestroyServiceProvider(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.destroyServiceProvider(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #destroyServiceProvider(java.lang.String)}
      */
    protected abstract void handleDestroyServiceProvider(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#deployRule(java.lang.String, java.lang.String, java.lang.String)
     */
    public void deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName) - 'strategyName' can not be null or empty");
        }
        if (moduleName == null || moduleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName) - 'moduleName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName) - 'ruleName' can not be null or empty");
        }
        try
        {
            this.handleDeployRule(strategyName, moduleName, ruleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deployRule(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleDeployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#deployRule(java.lang.String, java.lang.String, java.lang.String, java.lang.Integer)
     */
    public void deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId) - 'strategyName' can not be null or empty");
        }
        if (moduleName == null || moduleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId) - 'moduleName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId) - 'ruleName' can not be null or empty");
        }
        if (targetId == null)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId) - 'targetId' can not be null");
        }
        try
        {
            this.handleDeployRule(strategyName, moduleName, ruleName, targetId);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.deployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deployRule(java.lang.String, java.lang.String, java.lang.String, java.lang.Integer)}
      */
    protected abstract void handleDeployRule(java.lang.String strategyName, java.lang.String moduleName, java.lang.String ruleName, java.lang.Integer targetId)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#deployModule(java.lang.String, java.lang.String)
     */
    public void deployModule(java.lang.String strategyName, java.lang.String moduleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployModule(java.lang.String strategyName, java.lang.String moduleName) - 'strategyName' can not be null or empty");
        }
        if (moduleName == null || moduleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployModule(java.lang.String strategyName, java.lang.String moduleName) - 'moduleName' can not be null or empty");
        }
        try
        {
            this.handleDeployModule(strategyName, moduleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.deployModule(java.lang.String strategyName, java.lang.String moduleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deployModule(java.lang.String, java.lang.String)}
      */
    protected abstract void handleDeployModule(java.lang.String strategyName, java.lang.String moduleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#deployAllModules(java.lang.String)
     */
    public void deployAllModules(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.deployAllModules(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleDeployAllModules(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.deployAllModules(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deployAllModules(java.lang.String)}
      */
    protected abstract void handleDeployAllModules(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#isDeployed(java.lang.String, java.lang.String)
     */
    public boolean isDeployed(java.lang.String strategyName, java.lang.String ruleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.isDeployed(java.lang.String strategyName, java.lang.String ruleName) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.isDeployed(java.lang.String strategyName, java.lang.String ruleName) - 'ruleName' can not be null or empty");
        }
        try
        {
            return this.handleIsDeployed(strategyName, ruleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.isDeployed(java.lang.String strategyName, java.lang.String ruleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #isDeployed(java.lang.String, java.lang.String)}
      */
    protected abstract boolean handleIsDeployed(java.lang.String strategyName, java.lang.String ruleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#undeployRule(java.lang.String, java.lang.String)
     */
    public void undeployRule(java.lang.String strategyName, java.lang.String ruleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployRule(java.lang.String strategyName, java.lang.String ruleName) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployRule(java.lang.String strategyName, java.lang.String ruleName) - 'ruleName' can not be null or empty");
        }
        try
        {
            this.handleUndeployRule(strategyName, ruleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.undeployRule(java.lang.String strategyName, java.lang.String ruleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #undeployRule(java.lang.String, java.lang.String)}
      */
    protected abstract void handleUndeployRule(java.lang.String strategyName, java.lang.String ruleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#undeployRuleByTarget(java.lang.String, java.lang.String, int)
     */
    public void undeployRuleByTarget(java.lang.String strategyName, java.lang.String ruleName, int targetId)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployRuleByTarget(java.lang.String strategyName, java.lang.String ruleName, int targetId) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployRuleByTarget(java.lang.String strategyName, java.lang.String ruleName, int targetId) - 'ruleName' can not be null or empty");
        }
        try
        {
            this.handleUndeployRuleByTarget(strategyName, ruleName, targetId);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.undeployRuleByTarget(java.lang.String strategyName, java.lang.String ruleName, int targetId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #undeployRuleByTarget(java.lang.String, java.lang.String, int)}
      */
    protected abstract void handleUndeployRuleByTarget(java.lang.String strategyName, java.lang.String ruleName, int targetId)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#undeployModule(java.lang.String, java.lang.String)
     */
    public void undeployModule(java.lang.String strategyName, java.lang.String moduleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployModule(java.lang.String strategyName, java.lang.String moduleName) - 'strategyName' can not be null or empty");
        }
        if (moduleName == null || moduleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.undeployModule(java.lang.String strategyName, java.lang.String moduleName) - 'moduleName' can not be null or empty");
        }
        try
        {
            this.handleUndeployModule(strategyName, moduleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.undeployModule(java.lang.String strategyName, java.lang.String moduleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #undeployModule(java.lang.String, java.lang.String)}
      */
    protected abstract void handleUndeployModule(java.lang.String strategyName, java.lang.String moduleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#sendEvent(java.lang.String, java.lang.Object)
     */
    public void sendEvent(java.lang.String strategyName, java.lang.Object object)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.sendEvent(java.lang.String strategyName, java.lang.Object object) - 'strategyName' can not be null or empty");
        }
        if (object == null)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.sendEvent(java.lang.String strategyName, java.lang.Object object) - 'object' can not be null");
        }
        try
        {
            this.handleSendEvent(strategyName, object);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.sendEvent(java.lang.String strategyName, java.lang.Object object)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #sendEvent(java.lang.String, java.lang.Object)}
      */
    protected abstract void handleSendEvent(java.lang.String strategyName, java.lang.Object object)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#routeEvent(java.lang.String, java.lang.Object)
     */
    public void routeEvent(java.lang.String strategyName, java.lang.Object object)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.routeEvent(java.lang.String strategyName, java.lang.Object object) - 'strategyName' can not be null or empty");
        }
        if (object == null)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.routeEvent(java.lang.String strategyName, java.lang.Object object) - 'object' can not be null");
        }
        try
        {
            this.handleRouteEvent(strategyName, object);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.routeEvent(java.lang.String strategyName, java.lang.Object object)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #routeEvent(java.lang.String, java.lang.Object)}
      */
    protected abstract void handleRouteEvent(java.lang.String strategyName, java.lang.Object object)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#getLastEvent(java.lang.String, java.lang.String)
     */
    public java.lang.Object getLastEvent(java.lang.String strategyName, java.lang.String ruleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getLastEvent(java.lang.String strategyName, java.lang.String ruleName) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getLastEvent(java.lang.String strategyName, java.lang.String ruleName) - 'ruleName' can not be null or empty");
        }
        try
        {
            return this.handleGetLastEvent(strategyName, ruleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.getLastEvent(java.lang.String strategyName, java.lang.String ruleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getLastEvent(java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.Object handleGetLastEvent(java.lang.String strategyName, java.lang.String ruleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#getLastEventProperty(java.lang.String, java.lang.String, java.lang.String)
     */
    public java.lang.Object getLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'ruleName' can not be null or empty");
        }
        if (property == null || property.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'property' can not be null or empty");
        }
        try
        {
            return this.handleGetLastEventProperty(strategyName, ruleName, property);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.getLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getLastEventProperty(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.Object handleGetLastEventProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#getAllEvents(java.lang.String, java.lang.String)
     */
    public java.util.List getAllEvents(java.lang.String strategyName, java.lang.String ruleName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getAllEvents(java.lang.String strategyName, java.lang.String ruleName) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getAllEvents(java.lang.String strategyName, java.lang.String ruleName) - 'ruleName' can not be null or empty");
        }
        try
        {
            return this.handleGetAllEvents(strategyName, ruleName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.getAllEvents(java.lang.String strategyName, java.lang.String ruleName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllEvents(java.lang.String, java.lang.String)}
      */
    protected abstract java.util.List handleGetAllEvents(java.lang.String strategyName, java.lang.String ruleName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#getAllEventsProperty(java.lang.String, java.lang.String, java.lang.String)
     */
    public java.util.List getAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'strategyName' can not be null or empty");
        }
        if (ruleName == null || ruleName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'ruleName' can not be null or empty");
        }
        if (property == null || property.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property) - 'property' can not be null or empty");
        }
        try
        {
            return this.handleGetAllEventsProperty(strategyName, ruleName, property);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.getAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllEventsProperty(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract java.util.List handleGetAllEventsProperty(java.lang.String strategyName, java.lang.String ruleName, java.lang.String property)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#setInternalClock(java.lang.String, boolean)
     */
    public void setInternalClock(java.lang.String strategyName, boolean internal)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.setInternalClock(java.lang.String strategyName, boolean internal) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleSetInternalClock(strategyName, internal);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.setInternalClock(java.lang.String strategyName, boolean internal)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #setInternalClock(java.lang.String, boolean)}
      */
    protected abstract void handleSetInternalClock(java.lang.String strategyName, boolean internal)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#isInternalClock(java.lang.String)
     */
    public boolean isInternalClock(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.isInternalClock(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            return this.handleIsInternalClock(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.isInternalClock(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #isInternalClock(java.lang.String)}
      */
    protected abstract boolean handleIsInternalClock(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#setCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent)
     */
    public void setCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent currentTime)
    {
        if (currentTime == null)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.setCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent currentTime) - 'currentTime' can not be null");
        }
        try
        {
            this.handleSetCurrentTime(currentTime);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.setCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent currentTime)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #setCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent)}
      */
    protected abstract void handleSetCurrentTime(com.espertech.esper.client.time.CurrentTimeEvent currentTime)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#getCurrentTime(java.lang.String)
     */
    public long getCurrentTime(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.getCurrentTime(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            return this.handleGetCurrentTime(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.getCurrentTime(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getCurrentTime(java.lang.String)}
      */
    protected abstract long handleGetCurrentTime(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#initCoordination(java.lang.String)
     */
    public void initCoordination(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.initCoordination(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleInitCoordination(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.initCoordination(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #initCoordination(java.lang.String)}
      */
    protected abstract void handleInitCoordination(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#coordinate(java.lang.String, com.espertech.esperio.csv.CSVInputAdapterSpec)
     */
    public void coordinate(java.lang.String strategyName, com.espertech.esperio.csv.CSVInputAdapterSpec csvInputAdapterSpec)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.coordinate(java.lang.String strategyName, com.espertech.esperio.csv.CSVInputAdapterSpec csvInputAdapterSpec) - 'strategyName' can not be null or empty");
        }
        if (csvInputAdapterSpec == null)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.coordinate(java.lang.String strategyName, com.espertech.esperio.csv.CSVInputAdapterSpec csvInputAdapterSpec) - 'csvInputAdapterSpec' can not be null");
        }
        try
        {
            this.handleCoordinate(strategyName, csvInputAdapterSpec);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.coordinate(java.lang.String strategyName, com.espertech.esperio.csv.CSVInputAdapterSpec csvInputAdapterSpec)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #coordinate(java.lang.String, com.espertech.esperio.csv.CSVInputAdapterSpec)}
      */
    protected abstract void handleCoordinate(java.lang.String strategyName, com.espertech.esperio.csv.CSVInputAdapterSpec csvInputAdapterSpec)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#startCoordination(java.lang.String)
     */
    public void startCoordination(java.lang.String strategyName)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.startCoordination(java.lang.String strategyName) - 'strategyName' can not be null or empty");
        }
        try
        {
            this.handleStartCoordination(strategyName);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.startCoordination(java.lang.String strategyName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #startCoordination(java.lang.String)}
      */
    protected abstract void handleStartCoordination(java.lang.String strategyName)
        throws java.lang.Exception;

    /**
     * @see com.algoTrader.service.RuleService#setProperty(java.lang.String, java.lang.String, java.lang.String)
     */
    public void setProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value)
    {
        if (strategyName == null || strategyName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.setProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value) - 'strategyName' can not be null or empty");
        }
        if (key == null || key.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.setProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value) - 'key' can not be null or empty");
        }
        if (value == null || value.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.algoTrader.service.RuleService.setProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value) - 'value' can not be null or empty");
        }
        try
        {
            this.handleSetProperty(strategyName, key, value);
        }
        catch (Throwable th)
        {
            throw new com.algoTrader.service.RuleServiceException(
                "Error performing 'com.algoTrader.service.RuleService.setProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #setProperty(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleSetProperty(java.lang.String strategyName, java.lang.String key, java.lang.String value)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.algoTrader.PrincipalStore.get();
    }
}