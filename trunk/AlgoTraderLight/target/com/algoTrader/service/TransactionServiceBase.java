// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.algoTrader.service;

/**
 * <p>
 * Spring Service base class for
 * <code>com.algoTrader.service.TransactionService</code>, provides access to
 * all services and entities referenced by this service.
 * </p>
 * 
 * @see com.algoTrader.service.TransactionService
 */
public abstract class TransactionServiceBase
        implements com.algoTrader.service.TransactionService {
	
	private com.algoTrader.service.RuleService	ruleService;
	
	/**
	 * Sets the reference to <code>ruleService</code>.
	 */
	public void setRuleService(
	        final com.algoTrader.service.RuleService ruleService) {
		this.ruleService = ruleService;
	}
	
	/**
	 * Gets the reference to <code>ruleService</code>.
	 */
	protected com.algoTrader.service.RuleService getRuleService() {
		return ruleService;
	}
	
	private com.algoTrader.entity.SecurityDao	securityDao;
	
	/**
	 * Sets the reference to <code>security</code>'s DAO.
	 */
	public void setSecurityDao(
	        final com.algoTrader.entity.SecurityDao securityDao) {
		this.securityDao = securityDao;
	}
	
	/**
	 * Gets the reference to <code>security</code>'s DAO.
	 */
	protected com.algoTrader.entity.SecurityDao getSecurityDao() {
		return securityDao;
	}
	
	private com.algoTrader.entity.StrategyDao	strategyDao;
	
	/**
	 * Sets the reference to <code>strategy</code>'s DAO.
	 */
	public void setStrategyDao(
	        final com.algoTrader.entity.StrategyDao strategyDao) {
		this.strategyDao = strategyDao;
	}
	
	/**
	 * Gets the reference to <code>strategy</code>'s DAO.
	 */
	protected com.algoTrader.entity.StrategyDao getStrategyDao() {
		return strategyDao;
	}
	
	private com.algoTrader.entity.PositionDao	positionDao;
	
	/**
	 * Sets the reference to <code>position</code>'s DAO.
	 */
	public void setPositionDao(
	        final com.algoTrader.entity.PositionDao positionDao) {
		this.positionDao = positionDao;
	}
	
	/**
	 * Gets the reference to <code>position</code>'s DAO.
	 */
	protected com.algoTrader.entity.PositionDao getPositionDao() {
		return positionDao;
	}
	
	private com.algoTrader.entity.TransactionDao	transactionDao;
	
	/**
	 * Sets the reference to <code>transaction</code>'s DAO.
	 */
	public void setTransactionDao(
	        final com.algoTrader.entity.TransactionDao transactionDao) {
		this.transactionDao = transactionDao;
	}
	
	/**
	 * Gets the reference to <code>transaction</code>'s DAO.
	 */
	protected com.algoTrader.entity.TransactionDao getTransactionDao() {
		return transactionDao;
	}
	
	/**
	 * @see com.algoTrader.service.TransactionService#executeTransaction(java.lang.String,
	 *      com.algoTrader.vo.OrderVO)
	 */
	@Override
	public com.algoTrader.entity.Order executeTransaction(
	        final java.lang.String strategyName,
	        final com.algoTrader.vo.OrderVO order) {
		if (strategyName == null || strategyName.trim().length() == 0) { throw new IllegalArgumentException(
		        "com.algoTrader.service.TransactionService.executeTransaction(java.lang.String strategyName, com.algoTrader.vo.OrderVO order) - 'strategyName' can not be null or empty"); }
		if (order == null) { throw new IllegalArgumentException(
		        "com.algoTrader.service.TransactionService.executeTransaction(java.lang.String strategyName, com.algoTrader.vo.OrderVO order) - 'order' can not be null"); }
		if (order.getStrategyName() == null ||
		        order.getStrategyName().trim().length() == 0) { throw new IllegalArgumentException(
		        "com.algoTrader.service.TransactionService.executeTransaction(java.lang.String strategyName, com.algoTrader.vo.OrderVO order) - 'order.strategyName' can not be null or empty"); }
		if (order.getTransactionType() == null) { throw new IllegalArgumentException(
		        "com.algoTrader.service.TransactionService.executeTransaction(java.lang.String strategyName, com.algoTrader.vo.OrderVO order) - 'order.transactionType' can not be null"); }
		try {
			return handleExecuteTransaction(strategyName, order);
		} catch (final Throwable th) {
			throw new com.algoTrader.service.TransactionServiceException(
			        "Error performing 'com.algoTrader.service.TransactionService.executeTransaction(java.lang.String strategyName, com.algoTrader.vo.OrderVO order)' --> " +
			                th,
			        th);
		}
	}
	
	/**
	 * Performs the core logic for
	 * {@link #executeTransaction(java.lang.String, com.algoTrader.vo.OrderVO)}
	 */
	protected abstract com.algoTrader.entity.Order handleExecuteTransaction(
	        java.lang.String strategyName, com.algoTrader.vo.OrderVO order)
	        throws java.lang.Exception;
	
	/**
	 * Gets the current <code>principal</code> if one has been set,
	 * otherwise returns <code>null</code>.
	 * 
	 * @return the current principal
	 */
	protected java.security.Principal getPrincipal() {
		return com.algoTrader.PrincipalStore.get();
	}
}