// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearch.vsl in andromda-spring-cartridge.
//
package com.algoTrader;

import org.hibernate.criterion.Restrictions;

/**
 * Implements a generic search mechanism based on the Hibernate Criteria API.
 * The <code>CriteriaSearch</code> allows adding parameters which function as
 * where clause. The
 * parameters are analysed whether they should be considered or not. This
 * depends both on the actual
 * value of the parameter and on the configuration.<br>
 * The <code>CriteriaSearch</code> is expected to be a general solution for a
 * basic search with
 * parameters connected by logical <b>and</b>. This search does <b>not</b>
 * provide grouping.
 * 
 * @author Stefan Reichert
 * @author Peter Friese
 * @author Chad Brandon
 * @see org.hibernate.Criteria
 * @see org.hibernate.criterion.Expression
 */
public class CriteriaSearch {
	private final CriteriaSearchConfiguration	configuration;
	private final org.hibernate.Criteria	  rootCriteria;
	private final java.util.Map	              childCriteriaMap;
	private final java.util.List	          orderList;
	private final Class	                      resultType;
	
	private static final class ParameterComparator
	        implements java.util.Comparator {
		@Override
		public int compare(final Object object1, final Object object2) {
			final CriteriaSearchParameter parameter1 = (CriteriaSearchParameter) object1;
			final CriteriaSearchParameter parameter2 = (CriteriaSearchParameter) object2;
			
			final int relevance1 = parameter1.getOrderRelevance();
			final int relevance2 = parameter2.getOrderRelevance();
			int result = 0;
			if (relevance1 > relevance2) {
				result = 1;
			} else if (relevance1 < relevance2) {
				result = -1;
			}
			return result;
			
		}
	}
	
	/**
	 * Constructor for CriteriaSearch. Creates a <code>CriteriaSearch</code>
	 * with a default <code>CriteriaSearchConfiguration</code>.
	 * 
	 * @param session
	 *            The Hibernate session.
	 * @param resultType
	 *            The <code>Class</code> of the result.
	 */
	public CriteriaSearch(final org.hibernate.Session session,
	        final Class resultType) {
		configuration = new CriteriaSearchConfiguration();
		this.resultType = resultType;
		rootCriteria = session.createCriteria(this.resultType);
		childCriteriaMap = new java.util.HashMap();
		orderList = new java.util.ArrayList();
	}
	
	/**
	 * Executes a <code>HibernateQuery</code> using the currently defined
	 * <code>CriteriaSearchParameter</code>s, and returns a java.util.Set
	 * containing the query results.
	 * 
	 * @return result The result of the query.
	 * @throws org.hibernate.HibernateException
	 */
	public final java.util.Set executeAsSet()
	        throws org.hibernate.HibernateException {
		// add ordering
		if (orderList.size() > 0) {
			java.util.Collections.sort(orderList, new ParameterComparator());
			for (final java.util.Iterator orderIterator = orderList.iterator(); orderIterator
			        .hasNext();) {
				final CriteriaSearchParameter parameter = (CriteriaSearchParameter) orderIterator
				        .next();
				final int direction = parameter.getOrderDirection();
				if (direction == CriteriaSearchParameter.ORDER_ASC) {
					rootCriteria.addOrder(org.hibernate.criterion.Order
					        .asc(parameter.getParameterPattern()));
				} else {
					rootCriteria.addOrder(org.hibernate.criterion.Order
					        .desc(parameter.getParameterPattern()));
				}
			}
		}
		
		// set the first result if configured
		if (configuration.getFirstResult() != null) {
			rootCriteria.setFirstResult(configuration.getFirstResult()
			        .intValue());
		}
		
		// set the fetch size if configured
		if (configuration.getFetchSize() != null) {
			rootCriteria.setFetchSize(configuration.getFetchSize().intValue());
		}
		
		// limit the maximum result if configured
		if (configuration.getMaximumResultSize() != null) {
			rootCriteria.setMaxResults(configuration.getMaximumResultSize()
			        .intValue());
		}
		
		// Hibernate does not support a 'unique' identifier. As a search may
		// contain outer joins,
		// duplicates in the resultList are possible. We eliminate any
		// duplicates here, creating a
		// distinctified resultSet (Suggestion from Hibernate itself; see
		// www.hibernate.org's FAQ's).
		return new java.util.LinkedHashSet(rootCriteria.list());
	}
	
	/**
	 * Executes a <code>HibernateQuery</code> using the currently defined
	 * <code>CriteriaSearchParameter</code>s, and returns a java.util.List
	 * containing the query results.
	 * 
	 * @return result The result of the query.
	 * @throws org.hibernate.HibernateException
	 */
	public java.util.List executeAsList()
	        throws org.hibernate.HibernateException {
		return new java.util.ArrayList(executeAsSet());
	}
	
	/**
	 * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
	 * is connected to
	 * the search by logical <b>and</b>. It is not considered if the value is
	 * <code>null</code>.
	 * If the value is not <code>null</code> it is compared using the
	 * <code>CriteriaSearchParameter.EQUALS_COMPARATOR</code>.
	 * 
	 * @param parameterValue
	 *            The value of the parameter.
	 * @param parameterPattern
	 *            The pattern of the parameter (dot-seperated path e.g.
	 *            person.address.street).
	 * @throws org.hibernate.HibernateException
	 */
	public void addParameter(final Object parameterValue,
	        final String parameterPattern)
	        throws org.hibernate.HibernateException {
		addParameter(new CriteriaSearchParameter(parameterValue,
		        parameterPattern));
	}
	
	/**
	 * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
	 * is connected to
	 * the search by logical <b>and</b>. It is not considered if the value is
	 * <code>null</code> or
	 * if the <code>String</code> empty. If the value is not <code>null</code>
	 * it is compared
	 * using the <code>CriteriaSearchParameter.LIKE_COMPARATOR</code>.
	 * 
	 * @param parameterValue
	 *            The value of the parameter.
	 * @param parameterPattern
	 *            The pattern of the parameter (dot-seperated path e.g.
	 *            person.address.street).
	 * @throws org.hibernate.HibernateException
	 */
	public void addParameter(final String parameterValue,
	        final String parameterPattern)
	        throws org.hibernate.HibernateException {
		addParameter(new CriteriaSearchParameter(parameterValue,
		        parameterPattern));
	}
	
	/**
	 * Adds a <code>CriteriaSearchParameter</code> to this search. The parameter
	 * is connected to
	 * the search by logical <b>and</b>.
	 * 
	 * @param parameter
	 *            The <code>CriteriaSearchParameter</code> to add.
	 * @throws org.hibernate.HibernateException
	 */
	public void addParameter(final CriteriaSearchParameter parameter)
	        throws org.hibernate.HibernateException {
		if (considerParameter(parameter)) {
			// parsing the pattern of the parameter
			final String[] path = CriteriaSearchParameter.PATTERN
			        .split(parameter.getParameterPattern());
			String parameterName = path[path.length - 1];
			org.hibernate.Criteria parameterCriteria = rootCriteria;
			
			org.hibernate.Criteria childEntityCriteria;
			if (path.length > 1) {
				// We have a parameter affecting an attribute of an inner
				// childEntity object so we need
				// to traverse to get the right criteria object
				childEntityCriteria = rootCriteria;
				// Evaluating the proper criteria object for the defined
				// parameter
				Class type = resultType;
				for (int index = 0; index < path.length - 1; index++) {
					final String childEntityName = path[index];
					final java.util.Collection embeddedValues = CriteriaSearchProperties
					        .getEmbeddedValues(type);
					if (embeddedValues != null &&
					        embeddedValues.contains(childEntityName)) {
						// - use the rest of the path as the parameter name
						final int number = path.length - index;
						final String[] restOfPath = new String[path.length -
						        index];
						java.lang.System.arraycopy(path, index, restOfPath, 0,
						        number);
						parameterName = org.apache.commons.lang.StringUtils
						        .join(restOfPath, ".");
						break;
					}
					type = CriteriaSearchProperties
					        .getNavigableAssociationEndType(type,
					                childEntityName);
					childEntityCriteria = locateCriteria(childEntityName,
					        childEntityCriteria);
				}
				if (childEntityCriteria != null) {
					// We now have the right criteria object
					parameterCriteria = childEntityCriteria;
				}
			}
			// check the type parameter value to add
			if (parameter.getParameterValue() instanceof Object[]) {
				addExpression(
				        parameterCriteria,
				        parameterName,
				        (Object[]) parameter.getParameterValue(),
				        parameter.getComparatorID(),
				        parameter.getMatchMode());
			} else {
				addExpression(
				        parameterCriteria,
				        parameterName,
				        parameter.getParameterValue(),
				        parameter.getComparatorID(),
				        parameter.getMatchMode());
			}
		}
		// if the parameter is to be ordered, add it to the order list
		if (parameter.getOrderDirection() != CriteriaSearchParameter.ORDER_UNSET) {
			orderList.add(parameter);
		}
	}
	
	/**
	 * Decides whether a paramter is considered as a criteria for a search
	 * depending on the type and
	 * value of the <code>parameterValue</code> and <code>searchIfIsNull</code>.
	 * A <code>parameterValue</code> of the type <code>String</code> is
	 * considered <code>null</code> if being a <code>NullPointer</code> or
	 * empty.
	 * 
	 * @param parameter
	 *            The parameter to check.
	 */
	private boolean considerParameter(final CriteriaSearchParameter parameter) {
		if (parameter.getParameterValue() instanceof String) {
			final String stringParameterValue = (String) parameter
			        .getParameterValue();
			return parameter.isSearchIfIsNull()
			        || stringParameterValue != null &&
			        stringParameterValue.length() > 0;
		}
		if (parameter.getParameterValue() instanceof Object[]) {
			final Object[] parameterValues = (Object[]) parameter
			        .getParameterValue();
			return parameter.isSearchIfIsNull()
			        || parameterValues != null && parameterValues.length > 0;
		}
		return parameter.isSearchIfIsNull() ||
		        parameter.getParameterValue() != null;
	}
	
	/**
	 * Adds an <code>Expression</code> to a <code>Criteria</code>.
	 * 
	 * @param criteria
	 * @param parameterName
	 * @param parameterValue
	 * @param comparatorID
	 * @param matchMode
	 */
	private void addExpression(
	        final org.hibernate.Criteria criteria,
	        final String parameterName,
	        final Object parameterValue,
	        final int comparatorID,
	        final org.hibernate.criterion.MatchMode matchMode) {
		if (parameterValue != null) {
			switch (comparatorID) {
				case CriteriaSearchParameter.LIKE_COMPARATOR: {
					if (matchMode != null && parameterValue instanceof String) {
						criteria.add(Restrictions.like(
						        parameterName,
						        (String) parameterValue,
						        matchMode));
					} else {
						criteria.add(Restrictions.like(parameterName,
						        parameterValue));
					}
					break;
				}
				case CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR: {
					if (matchMode != null && parameterValue instanceof String) {
						criteria.add(Restrictions.ilike(
						        parameterName,
						        (String) parameterValue,
						        matchMode));
					} else {
						criteria.add(Restrictions.ilike(parameterName,
						        parameterValue));
					}
					break;
				}
				case CriteriaSearchParameter.EQUAL_COMPARATOR: {
					criteria.add(Restrictions.eq(parameterName, parameterValue));
					break;
				}
				case CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR: {
					criteria.add(Restrictions.ge(parameterName, parameterValue));
					break;
				}
				case CriteriaSearchParameter.GREATER_THAN_COMPARATOR: {
					criteria.add(Restrictions.gt(parameterName, parameterValue));
					break;
				}
				case CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR: {
					criteria.add(Restrictions.le(parameterName, parameterValue));
					break;
				}
				case CriteriaSearchParameter.LESS_THAN_COMPARATOR: {
					criteria.add(Restrictions.lt(parameterName, parameterValue));
					break;
				}
				case CriteriaSearchParameter.IN_COMPARATOR: {
					if (parameterValue instanceof java.util.Collection) {
						criteria.add(Restrictions.in(parameterName,
						        (java.util.Collection) parameterValue));
					}
					break;
				}
				case CriteriaSearchParameter.NOT_EQUAL_COMPARATOR: {
					criteria.add(Restrictions.ne(parameterName, parameterValue));
					break;
				}
			}
		} else {
			criteria.add(Restrictions.isNull(parameterName));
		}
		
	}
	
	/**
	 * Adds an <code>Expression</code> to a <code>Criteria</code>. The given
	 * <code>parameterValues</code> represents either an array of
	 * <code>String</code> or another object. The different values in the
	 * array are added to a disjunction or conjuction which is connected with
	 * logical and to the other criteria of the
	 * search.
	 * 
	 * @param criteria
	 * @param parameterName
	 * @param parameterValues
	 * @param searchIfNull
	 * @param comparatorID
	 * @param matchMode
	 */
	private void addExpression(
	        final org.hibernate.Criteria criteria,
	        final String parameterName,
	        final Object[] parameterValues,
	        final int comparatorID,
	        final org.hibernate.criterion.MatchMode matchMode) {
		if (parameterValues != null) {
			org.hibernate.criterion.Disjunction disjunction = null;
			org.hibernate.criterion.Conjunction conjunction = null;
			switch (comparatorID) {
				case CriteriaSearchParameter.LIKE_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					if (matchMode != null &&
					        parameterValues instanceof String[]) {
						final String[] stringParameterValues = (String[]) parameterValues;
						for (int index = 0; index < parameterValues.length; index++) {
							if (stringParameterValues[index] != null) {
								disjunction.add(Restrictions
								        .like(
								                parameterName,
								                stringParameterValues[index],
								                matchMode));
							} else {
								disjunction.add(Restrictions
								        .isNull(parameterName));
							}
						}
					} else {
						for (final Object parameterValue : parameterValues) {
							if (parameterValue != null) {
								disjunction.add(Restrictions.like(
								        parameterName, parameterValue));
							} else {
								disjunction.add(Restrictions
								        .isNull(parameterName));
							}
						}
					}
					break;
				}
				case CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					if (matchMode != null &&
					        parameterValues instanceof String[]) {
						final String[] stringParameterValues = (String[]) parameterValues;
						for (int index = 0; index < parameterValues.length; index++) {
							if (stringParameterValues[index] != null) {
								disjunction.add(Restrictions
								        .ilike(
								                parameterName,
								                stringParameterValues[index],
								                matchMode));
							} else {
								disjunction.add(Restrictions
								        .isNull(parameterName));
							}
						}
					} else {
						for (final Object parameterValue : parameterValues) {
							if (parameterValue != null) {
								disjunction.add(Restrictions.ilike(
								        parameterName, parameterValue));
							} else {
								disjunction.add(Restrictions
								        .isNull(parameterName));
							}
						}
					}
					break;
				}
				case CriteriaSearchParameter.EQUAL_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							disjunction.add(Restrictions.eq(parameterName,
							        parameterValue));
						} else {
							disjunction.add(Restrictions.isNull(parameterName));
						}
					}
					break;
				}
				case CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							disjunction.add(Restrictions.ge(parameterName,
							        parameterValue));
						} else {
							disjunction.add(Restrictions.isNull(parameterName));
						}
					}
					break;
				}
				case CriteriaSearchParameter.GREATER_THAN_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							disjunction.add(Restrictions.gt(parameterName,
							        parameterValue));
						} else {
							disjunction.add(Restrictions.isNull(parameterName));
						}
					}
					break;
				}
				case CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							disjunction.add(Restrictions.le(parameterName,
							        parameterValue));
						} else {
							disjunction.add(Restrictions.isNull(parameterName));
						}
					}
					break;
				}
				case CriteriaSearchParameter.LESS_THAN_COMPARATOR: {
					disjunction = org.hibernate.criterion.Restrictions
					        .disjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							disjunction.add(Restrictions.lt(parameterName,
							        parameterValue));
						} else {
							disjunction.add(Restrictions.isNull(parameterName));
						}
					}
					break;
				}
				case CriteriaSearchParameter.IN_COMPARATOR: {
					criteria.add(Restrictions
					        .in(parameterName, parameterValues));
					break;
				}
				case CriteriaSearchParameter.NOT_EQUAL_COMPARATOR: {
					conjunction = org.hibernate.criterion.Restrictions
					        .conjunction();
					for (final Object parameterValue : parameterValues) {
						if (parameterValue != null) {
							conjunction.add(Restrictions.ne(parameterName,
							        parameterValue));
						} else {
							conjunction.add(Restrictions
							        .isNotNull(parameterName));
						}
					}
					break;
				}
			}
			
			if (disjunction != null) {
				criteria.add(disjunction);
			}
			if (conjunction != null) {
				criteria.add(conjunction);
			}
		} else {
			criteria.add(Restrictions.isNull(parameterName));
		}
	}
	
	/**
	 * Locates a <code>Criteria</code> for a <code>childEntityName</code>. If a
	 * <code>Criteria</code> exists for the <code>childEntityName</code>, it is
	 * returned. If
	 * not, one is created and referenced in the <code>childCriteriaMap</code>
	 * under the <code>childEntityName</code>.
	 * 
	 * @param childEntityName
	 * @param parentCriteria
	 * @return criteria The Criteria for the childEntityName.
	 * @throws org.hibernate.HibernateException
	 */
	private org.hibernate.Criteria locateCriteria(final String childEntityName,
	        final org.hibernate.Criteria parentCriteria)
	        throws org.hibernate.HibernateException {
		if (childCriteriaMap.containsKey(childEntityName)) { return (org.hibernate.Criteria) childCriteriaMap
		        .get(childEntityName); }
		final org.hibernate.Criteria childCriteria = parentCriteria
		        .createCriteria(childEntityName);
		if (configuration.isForceEagerLoading()) {
			parentCriteria.setFetchMode(childEntityName,
			        org.hibernate.FetchMode.JOIN);
		}
		childCriteriaMap.put(childEntityName, childCriteria);
		return childCriteria;
	}
	
	/**
	 * Returns the configuration of this search.
	 * 
	 * @return configuration
	 */
	public CriteriaSearchConfiguration getConfiguration() {
		return configuration;
	}
}