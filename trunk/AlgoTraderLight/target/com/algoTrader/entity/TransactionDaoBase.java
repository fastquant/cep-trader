// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.algoTrader.entity;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.algoTrader.entity.Transaction</code>.
 * </p>
 * 
 * @see com.algoTrader.entity.Transaction
 */
public abstract class TransactionDaoBase
        extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
        implements com.algoTrader.entity.TransactionDao {
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#load(int, int)
	 */
	@Override
	public java.lang.Object load(final int transform, final int id) {
		final java.lang.Object entity = getHibernateTemplate().get(
		        com.algoTrader.entity.TransactionImpl.class,
		        new java.lang.Integer(id));
		return transformEntity(transform,
		        (com.algoTrader.entity.Transaction) entity);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#load(int)
	 */
	@Override
	public com.algoTrader.entity.Transaction load(final int id) {
		return (com.algoTrader.entity.Transaction) this.load(
		        TransactionDao.TRANSFORM_NONE, id);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#loadAll()
	 */
	@Override
	public java.util.Collection loadAll() {
		return this.loadAll(TransactionDao.TRANSFORM_NONE);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#loadAll(int)
	 */
	@Override
	public java.util.Collection loadAll(final int transform) {
		final java.util.Collection results = getHibernateTemplate().loadAll(
		        com.algoTrader.entity.TransactionImpl.class);
		transformEntities(transform, results);
		return results;
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(com.algoTrader.entity.Transaction)
	 */
	@Override
	public com.algoTrader.entity.Transaction create(
	        final com.algoTrader.entity.Transaction transaction) {
		return (com.algoTrader.entity.Transaction) this.create(
		        TransactionDao.TRANSFORM_NONE, transaction);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(int transform,
	 *      com.algoTrader.entity.Transaction)
	 */
	@Override
	public java.lang.Object create(final int transform,
	        final com.algoTrader.entity.Transaction transaction) {
		if (transaction == null) { throw new IllegalArgumentException(
		        "Transaction.create - 'transaction' can not be null"); }
		getHibernateTemplate().save(transaction);
		return transformEntity(transform, transaction);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(java.util.Collection)
	 */
	@Override
	public java.util.Collection create(final java.util.Collection entities) {
		return create(TransactionDao.TRANSFORM_NONE, entities);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(int,
	 *      java.util.Collection)
	 */
	@Override
	public java.util.Collection create(final int transform,
	        final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "Transaction.create - 'entities' can not be null"); }
		getHibernateTemplate().execute(
		        new org.springframework.orm.hibernate3.HibernateCallback()
		    {
			    @Override
			    public java.lang.Object doInHibernate(
			            final org.hibernate.Session session)
			            throws org.hibernate.HibernateException
			    {
				    for (final java.util.Iterator entityIterator = entities
				            .iterator(); entityIterator.hasNext();)
				    {
					    create(transform,
					            (com.algoTrader.entity.Transaction) entityIterator
					                    .next());
				    }
				    return null;
			    }
		    });
		return entities;
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(java.util.Date, long,
	 *      java.math.BigDecimal, java.math.BigDecimal,
	 *      com.algoTrader.enumeration.Currency,
	 *      com.algoTrader.enumeration.TransactionType)
	 */
	@Override
	public com.algoTrader.entity.Transaction create(
	        final java.util.Date dateTime,
	        final long quantity,
	        final java.math.BigDecimal price,
	        final java.math.BigDecimal commission,
	        final com.algoTrader.enumeration.Currency currency,
	        final com.algoTrader.enumeration.TransactionType type) {
		return (com.algoTrader.entity.Transaction) this.create(
		        TransactionDao.TRANSFORM_NONE, dateTime, quantity, price,
		        commission, currency, type);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#create(int, java.util.Date,
	 *      long, java.math.BigDecimal, java.math.BigDecimal,
	 *      com.algoTrader.enumeration.Currency,
	 *      com.algoTrader.enumeration.TransactionType)
	 */
	@Override
	public java.lang.Object create(
	        final int transform,
	        final java.util.Date dateTime,
	        final long quantity,
	        final java.math.BigDecimal price,
	        final java.math.BigDecimal commission,
	        final com.algoTrader.enumeration.Currency currency,
	        final com.algoTrader.enumeration.TransactionType type) {
		final com.algoTrader.entity.Transaction entity = new com.algoTrader.entity.TransactionImpl();
		entity.setDateTime(dateTime);
		entity.setQuantity(quantity);
		entity.setPrice(price);
		entity.setCommission(commission);
		entity.setCurrency(currency);
		entity.setType(type);
		return this.create(transform, entity);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#update(com.algoTrader.entity.Transaction)
	 */
	@Override
	public void update(final com.algoTrader.entity.Transaction transaction) {
		if (transaction == null) { throw new IllegalArgumentException(
		        "Transaction.update - 'transaction' can not be null"); }
		getHibernateTemplate().update(transaction);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#update(java.util.Collection)
	 */
	@Override
	public void update(final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "Transaction.update - 'entities' can not be null"); }
		getHibernateTemplate().execute(
		        new org.springframework.orm.hibernate3.HibernateCallback()
		    {
			    @Override
			    public java.lang.Object doInHibernate(
			            final org.hibernate.Session session)
			            throws org.hibernate.HibernateException
			    {
				    for (final java.util.Iterator entityIterator = entities
				            .iterator(); entityIterator.hasNext();)
				    {
					    update((com.algoTrader.entity.Transaction) entityIterator
					            .next());
				    }
				    return null;
			    }
		    });
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#remove(com.algoTrader.entity.Transaction)
	 */
	@Override
	public void remove(final com.algoTrader.entity.Transaction transaction) {
		if (transaction == null) { throw new IllegalArgumentException(
		        "Transaction.remove - 'transaction' can not be null"); }
		getHibernateTemplate().delete(transaction);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#remove(int)
	 */
	@Override
	public void remove(final int id) {
		final com.algoTrader.entity.Transaction entity = this.load(id);
		if (entity != null) {
			this.remove(entity);
		}
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#remove(java.util.Collection)
	 */
	@Override
	public void remove(final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "Transaction.remove - 'entities' can not be null"); }
		getHibernateTemplate().deleteAll(entities);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllTrades()
	 */
	@Override
	public java.util.List findAllTrades() {
		return this.findAllTrades(TransactionDao.TRANSFORM_NONE);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllTrades(java.lang.String)
	 */
	@Override
	public java.util.List findAllTrades(final java.lang.String queryString) {
		return this.findAllTrades(TransactionDao.TRANSFORM_NONE, queryString);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllTrades(int)
	 */
	@Override
	public java.util.List findAllTrades(final int transform) {
		return this
		        .findAllTrades(
		                transform,
		                "from TransactionImpl as t join fetch t.security where t.type = 'BUY' or t.type = 'SELL' or t.type = 'EXPIRATION' order by t.id");
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllTrades(int,
	 *      java.lang.String)
	 */
	@Override
	public java.util.List findAllTrades(final int transform,
	        final java.lang.String queryString) {
		try {
			final org.hibernate.Query queryObject = super.getSession(false)
			        .createQuery(queryString);
			queryObject.setCacheable(true);
			final java.util.List results = queryObject.list();
			transformEntities(transform, results);
			return results;
		} catch (final org.hibernate.HibernateException ex) {
			throw super.convertHibernateAccessException(ex);
		}
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllCashflows()
	 */
	@Override
	public java.util.List findAllCashflows() {
		return this.findAllCashflows(TransactionDao.TRANSFORM_NONE);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllCashflows(java.lang.String)
	 */
	@Override
	public java.util.List findAllCashflows(final java.lang.String queryString) {
		return this
		        .findAllCashflows(TransactionDao.TRANSFORM_NONE, queryString);
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllCashflows(int)
	 */
	@Override
	public java.util.List findAllCashflows(final int transform) {
		return this
		        .findAllCashflows(
		                transform,
		                "from TransactionImpl as t where t.type = 'CREDIT' or t.type = 'DEBIT' or t.type = 'INTREST' or t.type = 'FEES' order by t.id");
	}
	
	/**
	 * @see com.algoTrader.entity.TransactionDao#findAllCashflows(int,
	 *      java.lang.String)
	 */
	@Override
	public java.util.List findAllCashflows(final int transform,
	        final java.lang.String queryString) {
		try {
			final org.hibernate.Query queryObject = super.getSession(false)
			        .createQuery(queryString);
			queryObject.setCacheable(true);
			final java.util.List results = queryObject.list();
			transformEntities(transform, results);
			return results;
		} catch (final org.hibernate.HibernateException ex) {
			throw super.convertHibernateAccessException(ex);
		}
	}
	
	/**
	 * Allows transformation of entities into value objects
	 * (or something else for that matter), when the <code>transform</code> flag
	 * is set to one of the constants defined in
	 * <code>com.algoTrader.entity.TransactionDao</code>, please note
	 * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so
	 * the entity itself
	 * will be returned.
	 * 
	 * If the integer argument value is unknown {@link #TRANSFORM_NONE} is
	 * assumed.
	 * 
	 * @param transform
	 *            one of the constants declared in
	 *            {@link com.algoTrader.entity.TransactionDao}
	 * @param entity
	 *            an entity that was found
	 * @return the transformed entity (i.e. new value object, etc)
	 * @see #transformEntities(int,java.util.Collection)
	 */
	protected java.lang.Object transformEntity(final int transform,
	        final com.algoTrader.entity.Transaction entity) {
		java.lang.Object target = null;
		if (entity != null) {
			switch (transform) {
				case TRANSFORM_NONE: // fall-through
				default:
					target = entity;
			}
		}
		return target;
	}
	
	/**
	 * Transforms a collection of entities using the
	 * {@link #transformEntity(int,com.algoTrader.entity.Transaction)} method.
	 * This method does not instantiate a new collection.
	 * <p/>
	 * This method is to be used internally only.
	 * 
	 * @param transform
	 *            one of the constants declared in
	 *            <code>com.algoTrader.entity.TransactionDao</code>
	 * @param entities
	 *            the collection of entities to transform
	 * @see #transformEntity(int,com.algoTrader.entity.Transaction)
	 */
	protected void transformEntities(final int transform,
	        final java.util.Collection entities) {
		switch (transform) {
			case TRANSFORM_NONE: // fall-through
			default:
				// do nothing;
		}
	}
	
}