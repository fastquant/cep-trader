// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package com.algoTrader.entity;

/**
 * @see com.algoTrader.entity.Security
 */
public interface SecurityDao {
	/**
	 * This constant is used as a transformation flag; entities can be converted
	 * automatically into value objects
	 * or other types, different methods in a class implementing this interface
	 * support this feature: look for
	 * an <code>int</code> parameter called <code>transform</code>.
	 * <p/>
	 * This specific flag denotes no transformation will occur.
	 */
	public final static int	TRANSFORM_NONE	= 0;
	
	/**
	 * Loads an instance of com.algoTrader.entity.Security from the persistent
	 * store.
	 */
	public com.algoTrader.entity.Security load(int id);
	
	/**
	 * <p>
	 * Does the same thing as {@link #load(int)} with an additional flag called
	 * <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong> be transformed. If this flag is any of the other
	 * constants defined in this class then the result <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entity
	 * (into a value object for example). By default, transformation does not
	 * occur.
	 * </p>
	 * 
	 * @param id
	 *            the identifier of the entity to load.
	 * @return either the entity or the object transformed from the entity.
	 */
	public Object load(int transform, int id);
	
	/**
	 * Loads all entities of type {@link com.algoTrader.entity.Security}.
	 * 
	 * @return the loaded entities.
	 */
	public java.util.Collection loadAll();
	
	/**
	 * <p>
	 * Does the same thing as {@link #loadAll()} with an additional flag called
	 * <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong> be transformed. If this flag is any of the other
	 * constants defined here then the result <strong>WILL BE</strong> passed
	 * through an operation which can optionally transform the entity (into a
	 * value object for example). By default, transformation does not occur.
	 * </p>
	 * 
	 * @param transform
	 *            the flag indicating what transformation to use.
	 * @return the loaded entities.
	 */
	public java.util.Collection loadAll(final int transform);
	
	/**
	 * Creates an instance of com.algoTrader.entity.Security and adds it to the
	 * persistent store.
	 */
	public com.algoTrader.entity.Security create(
	        com.algoTrader.entity.Security security);
	
	/**
	 * <p>
	 * Does the same thing as {@link #create(com.algoTrader.entity.Security)}
	 * with an additional flag called <code>transform</code>. If this flag is
	 * set to <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong> be transformed. If this flag is any of the other
	 * constants defined here then the result <strong>WILL BE</strong> passed
	 * through an operation which can optionally transform the entity (into a
	 * value object for example). By default, transformation does not occur.
	 * </p>
	 */
	public Object
	        create(int transform, com.algoTrader.entity.Security security);
	
	/**
	 * Creates a new instance of com.algoTrader.entity.Security and adds
	 * from the passed in <code>entities</code> collection
	 * 
	 * @param entities
	 *            the collection of com.algoTrader.entity.Security
	 *            instances to create.
	 * 
	 * @return the created instances.
	 */
	public java.util.Collection create(java.util.Collection entities);
	
	/**
	 * <p>
	 * Does the same thing as {@link #create(com.algoTrader.entity.Security)}
	 * with an additional flag called <code>transform</code>. If this flag is
	 * set to <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong> be transformed. If this flag is any of the other
	 * constants defined here then the result <strong>WILL BE</strong> passed
	 * through an operation which can optionally transform the entities (into
	 * value objects for example). By default, transformation does not occur.
	 * </p>
	 */
	public java.util.Collection create(int transform,
	        java.util.Collection entities);
	
	/**
	 * <p>
	 * Creates a new <code>com.algoTrader.entity.Security</code> instance from
	 * <strong>all</strong> attributes and adds it to the persistent store.
	 * </p>
	 */
	public com.algoTrader.entity.Security create(
	        java.lang.String isin,
	        java.lang.String symbol);
	
	/**
	 * <p>
	 * Does the same thing as
	 * {@link #create(java.lang.String, java.lang.String)} with an additional
	 * flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong> be transformed. If this flag is any of the other
	 * constants defined here then the result <strong>WILL BE</strong> passed
	 * through an operation which can optionally transform the entity (into a
	 * value object for example). By default, transformation does not occur.
	 * </p>
	 */
	public Object create(
	        int transform,
	        java.lang.String isin,
	        java.lang.String symbol);
	
	/**
	 * <p>
	 * Creates a new <code>com.algoTrader.entity.Security</code> instance from
	 * only <strong>required</strong> properties (attributes and association
	 * ends) and adds it to the persistent store.
	 * </p>
	 */
	public com.algoTrader.entity.Security create(
	        java.lang.String isin,
	        com.algoTrader.entity.SecurityFamily securityFamily);
	
	/**
	 * <p>
	 * Does the same thing as {@link #create(java.lang.String)} with an
	 * additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then the returned entity will
	 * <strong>NOT</strong be transformed. If this flag is any of the other
	 * constants defined here then the result <strong>WILL BE</strong> passed
	 * through an operation which can optionally transform the entity (into a
	 * value object for example). By default, transformation does not occur.
	 * </p>
	 */
	public Object create(
	        int transform,
	        java.lang.String isin,
	        com.algoTrader.entity.SecurityFamily securityFamily);
	
	/**
	 * Updates the <code>security</code> instance in the persistent store.
	 */
	public void update(com.algoTrader.entity.Security security);
	
	/**
	 * Updates all instances in the <code>entities</code> collection in the
	 * persistent store.
	 */
	public void update(java.util.Collection entities);
	
	/**
	 * Removes the instance of com.algoTrader.entity.Security from the
	 * persistent store.
	 */
	public void remove(com.algoTrader.entity.Security security);
	
	/**
	 * Removes the instance of com.algoTrader.entity.Security having the given
	 * <code>identifier</code> from the persistent store.
	 */
	public void remove(int id);
	
	/**
	 * Removes all entities in the given <code>entities<code> collection.
	 */
	public void remove(java.util.Collection entities);
	
	/**
 * 
     */
	public com.algoTrader.entity.Security findByIdFetched(int id);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIdFetched(int)} with an additional
	 * argument called <code>queryString</code>. This <code>queryString</code>
	 * argument allows you to override the query string defined in
	 * {@link #findByIdFetched(int)}.
	 * </p>
	 */
	public com.algoTrader.entity.Security findByIdFetched(String queryString,
	        int id);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIdFetched(int)} with an additional
	 * flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public Object findByIdFetched(int transform, int id);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIdFetched(boolean, int)} with an
	 * additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findByIdFetched(int, int id)}.
	 * </p>
	 */
	public Object findByIdFetched(int transform, String queryString, int id);
	
	/**
 * 
     */
	public com.algoTrader.entity.Security findByIsin(java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIsin(java.lang.String)} with an
	 * additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findByIsin(java.lang.String)}.
	 * </p>
	 */
	public com.algoTrader.entity.Security findByIsin(String queryString,
	        java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIsin(java.lang.String)} with an
	 * additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public Object findByIsin(int transform, java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIsin(boolean, java.lang.String)}
	 * with an additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findByIsin(int, java.lang.String isin)}.
	 * </p>
	 */
	public Object findByIsin(int transform, String queryString,
	        java.lang.String isin);
	
	/**
 * 
     */
	public com.algoTrader.entity.Security findByIsinFetched(
	        java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIsinFetched(java.lang.String)} with
	 * an additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findByIsinFetched(java.lang.String)}.
	 * </p>
	 */
	public com.algoTrader.entity.Security findByIsinFetched(String queryString,
	        java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findByIsinFetched(java.lang.String)} with
	 * an additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public Object findByIsinFetched(int transform, java.lang.String isin);
	
	/**
	 * <p>
	 * Does the same thing as
	 * {@link #findByIsinFetched(boolean, java.lang.String)} with an additional
	 * argument called <code>queryString</code>. This <code>queryString</code>
	 * argument allows you to override the query string defined in {@link
	 * #findByIsinFetched(int, java.lang.String isin)}.
	 * </p>
	 */
	public Object findByIsinFetched(int transform, String queryString,
	        java.lang.String isin);
	
	/**
 * 
     */
	public java.util.List findSecuritiesInPortfolio();
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesInPortfolio()} with an
	 * additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesInPortfolio()}.
	 * </p>
	 */
	public java.util.List findSecuritiesInPortfolio(String queryString);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesInPortfolio()} with an
	 * additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public java.util.List findSecuritiesInPortfolio(int transform);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesInPortfolio(boolean)} with
	 * an additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesInPortfolio(int)}.
	 * </p>
	 */
	public java.util.List findSecuritiesInPortfolio(int transform,
	        String queryString);
	
	/**
 * 
     */
	public java.util.List findSecuritiesOnWatchlist();
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnWatchlist()} with an
	 * additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesOnWatchlist()}.
	 * </p>
	 */
	public java.util.List findSecuritiesOnWatchlist(String queryString);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnWatchlist()} with an
	 * additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public java.util.List findSecuritiesOnWatchlist(int transform);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnWatchlist(boolean)} with
	 * an additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesOnWatchlist(int)}.
	 * </p>
	 */
	public java.util.List findSecuritiesOnWatchlist(int transform,
	        String queryString);
	
	/**
 * 
     */
	public java.util.List findSecuritiesOnActiveWatchlist();
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnActiveWatchlist()} with an
	 * additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesOnActiveWatchlist()}.
	 * </p>
	 */
	public java.util.List findSecuritiesOnActiveWatchlist(String queryString);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnActiveWatchlist()} with an
	 * additional flag called <code>transform</code>. If this flag is set to
	 * <code>TRANSFORM_NONE</code> then finder results will <strong>NOT</strong>
	 * be transformed during retrieval. If this flag is any of the other
	 * constants defined here then finder results <strong>WILL BE</strong>
	 * passed through an operation which can optionally transform the entities
	 * (into value objects for example). By default, transformation does not
	 * occur.
	 * </p>
	 */
	public java.util.List findSecuritiesOnActiveWatchlist(int transform);
	
	/**
	 * <p>
	 * Does the same thing as {@link #findSecuritiesOnActiveWatchlist(boolean)}
	 * with an additional argument called <code>queryString</code>. This
	 * <code>queryString</code> argument allows you to override the query string
	 * defined in {@link #findSecuritiesOnActiveWatchlist(int)}.
	 * </p>
	 */
	public java.util.List findSecuritiesOnActiveWatchlist(int transform,
	        String queryString);
	
}
