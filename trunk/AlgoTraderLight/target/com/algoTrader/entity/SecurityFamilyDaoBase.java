// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.algoTrader.entity;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.algoTrader.entity.SecurityFamily</code>.
 * </p>
 * 
 * @see com.algoTrader.entity.SecurityFamily
 */
public abstract class SecurityFamilyDaoBase
        extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
        implements com.algoTrader.entity.SecurityFamilyDao {
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#load(int, int)
	 */
	@Override
	public java.lang.Object load(final int transform, final int id) {
		final java.lang.Object entity = getHibernateTemplate().get(
		        com.algoTrader.entity.SecurityFamilyImpl.class,
		        new java.lang.Integer(id));
		return transformEntity(transform,
		        (com.algoTrader.entity.SecurityFamily) entity);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#load(int)
	 */
	@Override
	public com.algoTrader.entity.SecurityFamily load(final int id) {
		return (com.algoTrader.entity.SecurityFamily) this.load(
		        SecurityFamilyDao.TRANSFORM_NONE, id);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#loadAll()
	 */
	@Override
	public java.util.Collection loadAll() {
		return this.loadAll(SecurityFamilyDao.TRANSFORM_NONE);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#loadAll(int)
	 */
	@Override
	public java.util.Collection loadAll(final int transform) {
		final java.util.Collection results = getHibernateTemplate().loadAll(
		        com.algoTrader.entity.SecurityFamilyImpl.class);
		transformEntities(transform, results);
		return results;
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(com.algoTrader.entity.SecurityFamily)
	 */
	@Override
	public com.algoTrader.entity.SecurityFamily create(
	        final com.algoTrader.entity.SecurityFamily securityFamily) {
		return (com.algoTrader.entity.SecurityFamily) this.create(
		        SecurityFamilyDao.TRANSFORM_NONE, securityFamily);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(int transform,
	 *      com.algoTrader.entity.SecurityFamily)
	 */
	@Override
	public java.lang.Object create(final int transform,
	        final com.algoTrader.entity.SecurityFamily securityFamily) {
		if (securityFamily == null) { throw new IllegalArgumentException(
		        "SecurityFamily.create - 'securityFamily' can not be null"); }
		getHibernateTemplate().save(securityFamily);
		return transformEntity(transform, securityFamily);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(java.util.Collection)
	 */
	@Override
	public java.util.Collection create(final java.util.Collection entities) {
		return create(SecurityFamilyDao.TRANSFORM_NONE, entities);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(int,
	 *      java.util.Collection)
	 */
	@Override
	public java.util.Collection create(final int transform,
	        final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "SecurityFamily.create - 'entities' can not be null"); }
		getHibernateTemplate().execute(
		        new org.springframework.orm.hibernate3.HibernateCallback()
		    {
			    @Override
			    public java.lang.Object doInHibernate(
			            final org.hibernate.Session session)
			            throws org.hibernate.HibernateException
			    {
				    for (final java.util.Iterator entityIterator = entities
				            .iterator(); entityIterator.hasNext();)
				    {
					    create(transform,
					            (com.algoTrader.entity.SecurityFamily) entityIterator
					                    .next());
				    }
				    return null;
			    }
		    });
		return entities;
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(java.lang.String,
	 *      com.algoTrader.enumeration.Market,
	 *      com.algoTrader.enumeration.Currency, int, double,
	 *      java.math.BigDecimal, java.util.Date, java.util.Date, boolean,
	 *      boolean)
	 */
	@Override
	public com.algoTrader.entity.SecurityFamily create(
	        final java.lang.String name,
	        final com.algoTrader.enumeration.Market market,
	        final com.algoTrader.enumeration.Currency currency,
	        final int contractSize,
	        final double tickSize,
	        final java.math.BigDecimal commission,
	        final java.util.Date marketOpen,
	        final java.util.Date marketClose,
	        final boolean tradeable,
	        final boolean expirable) {
		return (com.algoTrader.entity.SecurityFamily) this.create(
		        SecurityFamilyDao.TRANSFORM_NONE, name, market, currency,
		        contractSize, tickSize, commission, marketOpen, marketClose,
		        tradeable, expirable);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#create(int,
	 *      java.lang.String, com.algoTrader.enumeration.Market,
	 *      com.algoTrader.enumeration.Currency, int, double,
	 *      java.math.BigDecimal, java.util.Date, java.util.Date, boolean,
	 *      boolean)
	 */
	@Override
	public java.lang.Object create(
	        final int transform,
	        final java.lang.String name,
	        final com.algoTrader.enumeration.Market market,
	        final com.algoTrader.enumeration.Currency currency,
	        final int contractSize,
	        final double tickSize,
	        final java.math.BigDecimal commission,
	        final java.util.Date marketOpen,
	        final java.util.Date marketClose,
	        final boolean tradeable,
	        final boolean expirable) {
		final com.algoTrader.entity.SecurityFamily entity = new com.algoTrader.entity.SecurityFamilyImpl();
		entity.setName(name);
		entity.setMarket(market);
		entity.setCurrency(currency);
		entity.setContractSize(contractSize);
		entity.setTickSize(tickSize);
		entity.setCommission(commission);
		entity.setMarketOpen(marketOpen);
		entity.setMarketClose(marketClose);
		entity.setTradeable(tradeable);
		entity.setExpirable(expirable);
		return this.create(transform, entity);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#update(com.algoTrader.entity.SecurityFamily)
	 */
	@Override
	public void
	        update(final com.algoTrader.entity.SecurityFamily securityFamily) {
		if (securityFamily == null) { throw new IllegalArgumentException(
		        "SecurityFamily.update - 'securityFamily' can not be null"); }
		getHibernateTemplate().update(securityFamily);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#update(java.util.Collection)
	 */
	@Override
	public void update(final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "SecurityFamily.update - 'entities' can not be null"); }
		getHibernateTemplate().execute(
		        new org.springframework.orm.hibernate3.HibernateCallback()
		    {
			    @Override
			    public java.lang.Object doInHibernate(
			            final org.hibernate.Session session)
			            throws org.hibernate.HibernateException
			    {
				    for (final java.util.Iterator entityIterator = entities
				            .iterator(); entityIterator.hasNext();)
				    {
					    update((com.algoTrader.entity.SecurityFamily) entityIterator
					            .next());
				    }
				    return null;
			    }
		    });
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#remove(com.algoTrader.entity.SecurityFamily)
	 */
	@Override
	public void
	        remove(final com.algoTrader.entity.SecurityFamily securityFamily) {
		if (securityFamily == null) { throw new IllegalArgumentException(
		        "SecurityFamily.remove - 'securityFamily' can not be null"); }
		getHibernateTemplate().delete(securityFamily);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#remove(int)
	 */
	@Override
	public void remove(final int id) {
		final com.algoTrader.entity.SecurityFamily entity = this.load(id);
		if (entity != null) {
			this.remove(entity);
		}
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#remove(java.util.Collection)
	 */
	@Override
	public void remove(final java.util.Collection entities) {
		if (entities == null) { throw new IllegalArgumentException(
		        "SecurityFamily.remove - 'entities' can not be null"); }
		getHibernateTemplate().deleteAll(entities);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#findByIsin(java.lang.String)
	 */
	@Override
	public com.algoTrader.entity.SecurityFamily findByIsin(
	        final java.lang.String isin) {
		return (com.algoTrader.entity.SecurityFamily) this.findByIsin(
		        SecurityFamilyDao.TRANSFORM_NONE, isin);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#findByIsin(java.lang.String,
	 *      java.lang.String)
	 */
	@Override
	public com.algoTrader.entity.SecurityFamily findByIsin(
	        final java.lang.String queryString, final java.lang.String isin) {
		return (com.algoTrader.entity.SecurityFamily) this.findByIsin(
		        SecurityFamilyDao.TRANSFORM_NONE, queryString, isin);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#findByIsin(int,
	 *      java.lang.String)
	 */
	@Override
	public java.lang.Object findByIsin(final int transform,
	        final java.lang.String isin) {
		return this
		        .findByIsin(
		                transform,
		                "select f from SecurityImpl as s join s.securityFamily as f where s.isin = :isin",
		                isin);
	}
	
	/**
	 * @see com.algoTrader.entity.SecurityFamilyDao#findByIsin(int,
	 *      java.lang.String, java.lang.String)
	 */
	@Override
	public java.lang.Object findByIsin(final int transform,
	        final java.lang.String queryString, final java.lang.String isin) {
		try {
			final org.hibernate.Query queryObject = super.getSession(false)
			        .createQuery(queryString);
			queryObject.setCacheable(true);
			queryObject.setParameter("isin", isin);
			final java.util.Set results = new java.util.LinkedHashSet(
			        queryObject.list());
			java.lang.Object result = null;
			if (results != null) {
				if (results.size() > 1) {
					throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
					        "More than one instance of 'com.algoTrader.entity.SecurityFamily"
					                +
					                "' was found when executing query --> '" +
					                queryString + "'");
				} else if (results.size() == 1) {
					result = results.iterator().next();
				}
			}
			result = transformEntity(transform,
			        (com.algoTrader.entity.SecurityFamily) result);
			return result;
		} catch (final org.hibernate.HibernateException ex) {
			throw super.convertHibernateAccessException(ex);
		}
	}
	
	/**
	 * Allows transformation of entities into value objects
	 * (or something else for that matter), when the <code>transform</code> flag
	 * is set to one of the constants defined in
	 * <code>com.algoTrader.entity.SecurityFamilyDao</code>, please note
	 * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so
	 * the entity itself
	 * will be returned.
	 * 
	 * If the integer argument value is unknown {@link #TRANSFORM_NONE} is
	 * assumed.
	 * 
	 * @param transform
	 *            one of the constants declared in
	 *            {@link com.algoTrader.entity.SecurityFamilyDao}
	 * @param entity
	 *            an entity that was found
	 * @return the transformed entity (i.e. new value object, etc)
	 * @see #transformEntities(int,java.util.Collection)
	 */
	protected java.lang.Object transformEntity(final int transform,
	        final com.algoTrader.entity.SecurityFamily entity) {
		java.lang.Object target = null;
		if (entity != null) {
			switch (transform) {
				case TRANSFORM_NONE: // fall-through
				default:
					target = entity;
			}
		}
		return target;
	}
	
	/**
	 * Transforms a collection of entities using the
	 * {@link #transformEntity(int,com.algoTrader.entity.SecurityFamily)}
	 * method. This method does not instantiate a new collection.
	 * <p/>
	 * This method is to be used internally only.
	 * 
	 * @param transform
	 *            one of the constants declared in
	 *            <code>com.algoTrader.entity.SecurityFamilyDao</code>
	 * @param entities
	 *            the collection of entities to transform
	 * @see #transformEntity(int,com.algoTrader.entity.SecurityFamily)
	 */
	protected void transformEntities(final int transform,
	        final java.util.Collection entities) {
		switch (transform) {
			case TRANSFORM_NONE: // fall-through
			default:
				// do nothing;
		}
	}
	
}